<?php

namespace Lemaur\Cms\Tests\Feature\Models;

use Illuminate\Foundation\Auth\User;
use Lemaur\Cms\Models\Page;
use Lemaur\Cms\Tests\TestCase;

class PageTest extends TestCase
{
    /** @test */
    public function it_may_belongs_to_a_user()
    {
        // @TODO
        $this->markTestSkipped();
    }

    /** @test */
    public function it_has_autogenerated_slug_from_title()
    {
        Page::create(['title' => 'My new Page']);

        $this->assertDatabaseHas('pages', ['title' => 'My new Page', 'slug' => 'my-new-page']);
    }

    /** @test */
    public function it_has_unique_slugs()
    {
        Page::create(['title' => 'My new Page']);
        Page::create(['title' => 'My new Page']);

        $this->assertDatabaseHas('pages', ['slug' => 'my-new-page']);
        $this->assertDatabaseHas('pages', ['slug' => 'my-new-page-1']);
    }

    /** @test */
    public function it_has_autogenerated_parent_from_page_model()
    {
        $parent = Page::create(['title' => 'Parent']);
        $page = Page::create(['title' => 'Page', 'parent' => $parent]);

        $this->assertEquals(null, $parent->parent);
        $this->assertEquals('parent', $page->parent);

        $this->assertDatabaseHas('pages', ['parent' => null, 'title' => 'Parent']);
        $this->assertDatabaseHas('pages', ['parent' => 'parent', 'title' => 'Page']);
    }

    /** @test */
    public function it_has_autogenerated_parent_from_nested_page_model()
    {
        $parent = Page::create(['title' => 'Parent']);
        $child = Page::create(['title' => 'Child', 'parent' => $parent]);
        $page = Page::create(['title' => 'Page', 'parent' => $child]);

        $this->assertEquals(null, $parent->parent);
        $this->assertEquals('parent', $child->parent);
        $this->assertEquals('parent/child', $page->parent);

        $this->assertDatabaseHas('pages', ['parent' => null, 'title' => 'Parent']);
        $this->assertDatabaseHas('pages', ['parent' => 'parent', 'title' => 'Child']);
        $this->assertDatabaseHas('pages', ['parent' => 'parent/child', 'title' => 'Page']);
    }

    /** @test */
    public function it_has_autogenerated_parent_from_deeply_nested_page_model()
    {
        $first = Page::create(['title' => 'First']);
        $second = Page::create(['title' => 'Second', 'parent' => $first]);
        $third = Page::create(['title' => 'Third', 'parent' => $second]);
        $fourth = Page::create(['title' => 'Fourth', 'parent' => $third]);

        $this->assertEquals(null, $first->parent);
        $this->assertEquals('first', $second->parent);
        $this->assertEquals('first/second', $third->parent);
        $this->assertEquals('first/second/third', $fourth->parent);

        $this->assertDatabaseHas('pages', ['parent' => null, 'title' => 'First']);
        $this->assertDatabaseHas('pages', ['parent' => 'first', 'title' => 'Second']);
        $this->assertDatabaseHas('pages', ['parent' => 'first/second', 'title' => 'Third']);
        $this->assertDatabaseHas('pages', ['parent' => 'first/second/third', 'title' => 'Fourth']);
    }

    /** @test */
    public function it_has_autogenerated_parent_from_page_slug()
    {
        $parent = Page::create(['title' => 'Parent']);
        $page = Page::create(['title' => 'Page', 'parent' => $parent->slug]);

        $this->assertEquals(null, $parent->parent);
        $this->assertEquals('parent', $page->parent);

        $this->assertDatabaseHas('pages', ['parent' => null, 'title' => 'Parent']);
        $this->assertDatabaseHas('pages', ['parent' => 'parent', 'title' => 'Page']);
    }

    /** @test */
    public function it_has_autogenerated_parent_from_nested_page_slug()
    {
        $parent = Page::create(['title' => 'Parent']);
        $child = Page::create(['title' => 'Child', 'parent' => $parent->slug]);
        $page = Page::create(['title' => 'Page', 'parent' => $child->slug]);

        $this->assertEquals(null, $parent->parent);
        $this->assertEquals('parent', $child->parent);
        $this->assertEquals('parent/child', $page->parent);

        $this->assertDatabaseHas('pages', ['parent' => null, 'title' => 'Parent']);
        $this->assertDatabaseHas('pages', ['parent' => 'parent', 'title' => 'Child']);
        $this->assertDatabaseHas('pages', ['parent' => 'parent/child', 'title' => 'Page']);
    }

    /** @test */
    public function it_has_autogenerated_parent_from_deeply_nested_page_slug()
    {
        $first = Page::create(['title' => 'First']);
        $second = Page::create(['title' => 'Second', 'parent' => $first->slug]);
        $third = Page::create(['title' => 'Third', 'parent' => $second->slug]);
        $fourth = Page::create(['title' => 'Fourth', 'parent' => $third->slug]);

        $this->assertEquals(null, $first->parent);
        $this->assertEquals('first', $second->parent);
        $this->assertEquals('first/second', $third->parent);
        $this->assertEquals('first/second/third', $fourth->parent);

        $this->assertDatabaseHas('pages', ['parent' => null, 'title' => 'First']);
        $this->assertDatabaseHas('pages', ['parent' => 'first', 'title' => 'Second']);
        $this->assertDatabaseHas('pages', ['parent' => 'first/second', 'title' => 'Third']);
        $this->assertDatabaseHas('pages', ['parent' => 'first/second/third', 'title' => 'Fourth']);
    }

    /** @test */
    public function it_may_has_extra_attributes()
    {
        $page = Page::factory()->create();

        // Set extra attribute
        $page->setExtraAttribute('meta', [
            'title' => 'Meta Title',
            'description' => 'Meta Description',
        ]);

        // Get extra attributes
        $this->assertEquals([
            'title' => 'Meta Title',
            'description' => 'Meta Description',
        ], $page->getExtraAttribute('meta'));

        // Has extra attribute
        $this->assertTrue($page->hasExtraAttribute('meta'));

        // Forget extra attribute
        $page->forgetExtraAttribute('meta');

        $this->assertFalse($page->hasExtraAttribute('meta'));

        // Fill extra attributes
        $page->fillExtraAttributes([
            'meta' => [
                'title' => 'Meta Title',
                'description' => 'Meta Description',
            ],
        ]);

        $this->assertEquals([
            'title' => 'Meta Title',
            'description' => 'Meta Description',
        ], $page->getExtraAttribute('meta'));
    }
}
